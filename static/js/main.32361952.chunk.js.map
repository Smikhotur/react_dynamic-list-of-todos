{"version":3,"sources":["components/TodoList/TodoList.jsx","api/api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","state","inputTitle","defaultSelect","handleInputChange","target","value","name","setState","this","props","todos","checkedHandler","selectUserHandler","searchByTodos","filter","todo","title","toLowerCase","includes","searchByComplited","completed","className","length","noValidate","autoComplete","TextField","label","id","variant","onChange","Select","MenuItem","map","key","type","checked","readOnly","onClick","userId","React","Component","request","url","options","fetch","then","response","ok","Error","status","statusText","json","result","data","getUser","CurrentUser","currentUser","prevProps","clearUser","email","phone","Button","color","App","selectedUserId","filterTodos","todoID","prevState","item","find","element","userID","shuffleTodos","i","random","Math","floor","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.32361952.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './TodoList.scss';\nimport Select from '@material-ui/core/Select';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport className from 'classnames';\n\nexport class TodoList extends React.Component {\n  state ={\n    inputTitle: '',\n    defaultSelect: 'Show All',\n  }\n\n  handleInputChange = ({ target }) => {\n    const { value, name } = target;\n\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  render() {\n    const {\n      todos,\n      checkedHandler,\n      selectUserHandler,\n    } = this.props;\n\n    const {\n      inputTitle,\n      defaultSelect,\n    } = this.state;\n\n    const searchByTodos = todos\n      .filter(todo => todo.title.toLowerCase()\n        .includes(inputTitle.toLowerCase()));\n    let searchByComplited = null;\n\n    switch (defaultSelect) {\n      case 'Show Completed':\n        searchByComplited = searchByTodos\n          .filter(todo => todo.completed === false);\n        break;\n\n      case 'Show Active':\n        searchByComplited = searchByTodos\n          .filter(todo => todo.completed === true);\n        break;\n\n      default:\n        searchByComplited = [...searchByTodos];\n    }\n\n    return (\n      <div className=\"TodoList\">\n        <h2>{`Todos: ${searchByComplited.length}`}</h2>\n        <form\n          className=\"TodoList__form\"\n          noValidate\n          autoComplete=\"off\"\n        >\n          <TextField\n            label=\"Search todos\"\n            id=\"outlined-size-small\"\n            name=\"inputTitle\"\n            value={inputTitle}\n            variant=\"outlined\"\n            onChange={this.handleInputChange}\n          />\n\n          <Select\n            className=\"selectMenu\"\n            variant=\"outlined\"\n            name=\"defaultSelect\"\n            value={defaultSelect}\n            onChange={this.handleInputChange}\n          >\n            <MenuItem\n              name=\"all\"\n              value=\"Show All\"\n            >\n              Show All\n            </MenuItem>\n            <MenuItem\n              name=\"completed\"\n              value=\"Show Completed\"\n            >\n              Show Completed\n            </MenuItem>\n            <MenuItem\n              name=\"active\"\n              value=\"Show Active\"\n            >\n              Show Active\n            </MenuItem>\n          </Select>\n        </form>\n        <ul className=\"TodoList__list\">\n          {searchByComplited.map(todo => (\n            <li\n              className={className(`TodoList__item`, {\n                'TodoList__item--checked': todo.completed === true,\n                ' TodoList__item--unchecked': todo.completed === false,\n              })}\n              key={todo.id}\n            >\n              <label>\n                <input\n                  type=\"checkbox\"\n                  name=\"completed\"\n                  onChange={() => checkedHandler(todo.id)}\n                  checked={todo.completed}\n                  readOnly\n                />\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                className=\"\n                TodoList__user-button\n                TodoList__user-button--selected\n                button\n              \"\n                onClick={() => {\n                  selectUserHandler(todo.userId);\n                }}\n                type=\"button\"\n              >\n                {`User ${todo.userId}`}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n    userId: PropTypes.number.isRequired,\n  })).isRequired,\n  checkedHandler: PropTypes.func.isRequired,\n  selectUserHandler: PropTypes.func.isRequired,\n};\n","const BASE_URL = 'https://mate-api.herokuapp.com';\n\nconst request = (url, options) => fetch(`${BASE_URL}${url}`, options)\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    return response.json();\n  })\n  .then(result => result.data);\n\nexport const getAllTodos = () => request('/todos');\nexport const getUser = userId => request(`/users/${userId}`);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './CurrentUser.scss';\nimport Button from '@material-ui/core/Button';\nimport { getUser } from '../../api/api';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    currentUser: {},\n  }\n\n  componentDidMount() {\n    getUser(this.props.userId)\n      .then((result) => {\n        this.setState({\n          currentUser: result,\n        });\n      });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      getUser(this.props.userId)\n        .then((result) => {\n          this.setState({\n            currentUser: result,\n          });\n        });\n    }\n  }\n\n  render() {\n    const { currentUser } = this.state;\n    const { clearUser } = this.props;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>{`Selected user: ${currentUser.id}`}</span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{currentUser.name}</h3>\n        <p className=\"CurrentUser__email\">{currentUser.email}</p>\n        <p className=\"CurrentUser__phone\">{currentUser.phone}</p>\n        <Button\n          variant=\"outlined\"\n          color=\"secondary\"\n          onClick={() => {\n            clearUser();\n          }}\n        >\n          Clear\n        </Button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  clearUser: PropTypes.func.isRequired,\n  userId: PropTypes.number.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport Button from '@material-ui/core/Button';\n\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getAllTodos } from './api/api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  componentDidMount() {\n    getAllTodos()\n      .then((todos) => {\n        const result = this.filterTodos(todos);\n\n        this.setState({ todos: result });\n      });\n  }\n\n  filterTodos = todos => todos\n    .filter(todo => typeof todo.userId === 'number')\n    .filter(todo => typeof todo.completed === 'boolean')\n    .filter(todo => todo.title !== '')\n\n  checkedHandler = (todoID) => {\n    this.setState((prevState) => {\n      const item = [...prevState.todos].find(element => element.id === todoID);\n\n      item.completed = !item.completed;\n\n      return {\n        todos: [...prevState.todos],\n      };\n    });\n  }\n\n  selectUserHandler = (userID) => {\n    this.setState({ selectedUserId: userID });\n  }\n\n  clearUser = () => {\n    this.setState({ selectedUserId: 0 });\n  }\n\n  shuffleTodos = (todo) => {\n    for (let i = todo.length - 1; i > 0; i -= 1) {\n      const random = Math.floor(Math.random() * (i + 1));\n\n      // eslint-disable-next-line no-param-reassign\n      [todo[i], todo[random]] = [todo[random], todo[i]];\n    }\n\n    this.setState({ todos: todo });\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <Button\n            variant=\"outlined\"\n            color=\"secondary\"\n            onClick={() => {\n              this.shuffleTodos(todos);\n            }}\n          >\n            Randomize\n          </Button>\n          <TodoList\n            todos={todos}\n            checkedHandler={this.checkedHandler}\n            selectUserHandler={this.selectUserHandler}\n            shuffleTodos={this.shuffleTodos}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearUser={this.clearUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}