{"version":3,"sources":["components/TodoList/TodoList.jsx","api/api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","state","inputTitle","defaultSelect","handleInputChange","target","value","name","setState","filterByTitle","todo","title","toLowerCase","includes","filterByStatus","completed","this","props","todos","checkedHandler","selectUserHandler","filterTodos","filter","className","length","noValidate","autoComplete","TextField","label","id","variant","onChange","Select","MenuItem","map","key","type","checked","readOnly","onClick","userId","React","Component","request","url","options","fetch","then","response","ok","Error","status","statusText","json","result","data","getUser","CurrentUser","currentUser","prevProps","clearUser","email","phone","Button","color","App","selectedUserId","todoID","prevState","item","find","element","userID","shuffleTodos","i","random","Math","floor","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.61f632ea.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './TodoList.scss';\nimport Select from '@material-ui/core/Select';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport className from 'classnames';\n\nexport class TodoList extends React.Component {\n  state ={\n    inputTitle: '',\n    defaultSelect: 'Show All',\n  }\n\n  handleInputChange = ({ target }) => {\n    const { value, name } = target;\n\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  filterByTitle = (todo) => {\n    const { inputTitle } = this.state;\n\n    return todo.title.toLowerCase()\n      .includes(inputTitle.toLowerCase());\n  }\n\n  filterByStatus = (todo) => {\n    const { defaultSelect } = this.state;\n\n    switch (defaultSelect) {\n      case 'Show Completed': return todo.completed;\n      case 'Show Active': return !todo.completed;\n      default: return true;\n    }\n  }\n\n  render() {\n    const {\n      todos,\n      checkedHandler,\n      selectUserHandler,\n    } = this.props;\n\n    const {\n      inputTitle,\n      defaultSelect,\n    } = this.state;\n\n    const filterTodos = todos\n      .filter(this.filterByTitle)\n      .filter(this.filterByStatus);\n\n    return (\n      <div className=\"TodoList\">\n        <h2>{`Todos: ${filterTodos.length}`}</h2>\n        <form\n          className=\"TodoList__form\"\n          noValidate\n          autoComplete=\"off\"\n        >\n          <TextField\n            label=\"Search todos\"\n            id=\"outlined-size-small\"\n            name=\"inputTitle\"\n            value={inputTitle}\n            variant=\"outlined\"\n            onChange={this.handleInputChange}\n          />\n\n          <Select\n            className=\"selectMenu\"\n            variant=\"outlined\"\n            name=\"defaultSelect\"\n            value={defaultSelect}\n            onChange={this.handleInputChange}\n          >\n            <MenuItem\n              name=\"all\"\n              value=\"Show All\"\n            >\n              Show All\n            </MenuItem>\n            <MenuItem\n              name=\"completed\"\n              value=\"Show Completed\"\n            >\n              Show Completed\n            </MenuItem>\n            <MenuItem\n              name=\"active\"\n              value=\"Show Active\"\n            >\n              Show Active\n            </MenuItem>\n          </Select>\n        </form>\n        <ul className=\"TodoList__list\">\n          {filterTodos.map(todo => (\n            <li\n              className={className(`TodoList__item`, {\n                'TodoList__item--checked': todo.completed === true,\n                ' TodoList__item--unchecked': todo.completed === false,\n              })}\n              key={todo.id}\n            >\n              <label>\n                <input\n                  type=\"checkbox\"\n                  name=\"completed\"\n                  onChange={() => checkedHandler(todo.id)}\n                  checked={todo.completed}\n                  readOnly\n                />\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                className=\"\n                TodoList__user-button\n                TodoList__user-button--selected\n                button\n              \"\n                onClick={() => {\n                  selectUserHandler(todo.userId);\n                }}\n                type=\"button\"\n              >\n                {`User ${todo.userId}`}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n    userId: PropTypes.number.isRequired,\n  })).isRequired,\n  checkedHandler: PropTypes.func.isRequired,\n  selectUserHandler: PropTypes.func.isRequired,\n};\n","const BASE_URL = 'https://mate-api.herokuapp.com';\n\nconst request = (url, options) => fetch(`${BASE_URL}${url}`, options)\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    return response.json();\n  })\n  .then(result => result.data);\n\nexport const getAllTodos = () => request('/todos');\nexport const getUser = userId => request(`/users/${userId}`);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './CurrentUser.scss';\nimport Button from '@material-ui/core/Button';\nimport { getUser } from '../../api/api';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    currentUser: {},\n  }\n\n  componentDidMount() {\n    getUser(this.props.userId)\n      .then((result) => {\n        this.setState({\n          currentUser: result,\n        });\n      });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      getUser(this.props.userId)\n        .then((result) => {\n          this.setState({\n            currentUser: result,\n          });\n        });\n    }\n  }\n\n  render() {\n    const { currentUser } = this.state;\n    const { clearUser } = this.props;\n\n    return (\n      <>\n        { currentUser === null ? (\n          <h1>Error dataBase</h1>\n        )\n          : (\n            <div className=\"CurrentUser\">\n              <h2 className=\"CurrentUser__title\">\n                <span>{`Selected user: ${currentUser.id}`}</span>\n              </h2>\n\n              <h3 className=\"CurrentUser__name\">{currentUser.name}</h3>\n              <p className=\"CurrentUser__email\">{currentUser.email}</p>\n              <p className=\"CurrentUser__phone\">{currentUser.phone}</p>\n              <Button\n                variant=\"outlined\"\n                color=\"secondary\"\n                onClick={() => {\n                  clearUser();\n                }}\n              >\n                Clear\n              </Button>\n            </div>\n          )}\n      </>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  clearUser: PropTypes.func.isRequired,\n  userId: PropTypes.number.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport Button from '@material-ui/core/Button';\n\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getAllTodos } from './api/api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  componentDidMount() {\n    getAllTodos()\n      .then((todos) => {\n        const result = this.filterTodos(todos);\n\n        this.setState({ todos: result });\n      });\n  }\n\n  filterTodos = todos => todos\n    .filter(todo => typeof todo.userId === 'number')\n    .filter(todo => typeof todo.completed === 'boolean')\n    .filter(todo => todo.title !== '')\n\n  checkedHandler = (todoID) => {\n    this.setState((prevState) => {\n      const item = [...prevState.todos].find(element => element.id === todoID);\n\n      item.completed = !item.completed;\n\n      return {\n        todos: [...prevState.todos],\n      };\n    });\n  }\n\n  selectUserHandler = (userID) => {\n    this.setState({ selectedUserId: userID });\n  }\n\n  clearUser = () => {\n    this.setState({ selectedUserId: 0 });\n  }\n\n  shuffleTodos = (todo) => {\n    for (let i = todo.length - 1; i > 0; i -= 1) {\n      const random = Math.floor(Math.random() * (i + 1));\n\n      // eslint-disable-next-line no-param-reassign\n      [todo[i], todo[random]] = [todo[random], todo[i]];\n    }\n\n    this.setState({ todos: todo });\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <Button\n            variant=\"outlined\"\n            color=\"secondary\"\n            onClick={() => {\n              this.shuffleTodos(todos);\n            }}\n          >\n            Randomize\n          </Button>\n          <TodoList\n            todos={todos}\n            checkedHandler={this.checkedHandler}\n            selectUserHandler={this.selectUserHandler}\n            shuffleTodos={this.shuffleTodos}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearUser={this.clearUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}